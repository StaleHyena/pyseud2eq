use crate::ast::{Target, ExprSet, Expr, ExprKind, Opcode, Opcode::*, Scope, Render, RepStyle};
use rug::Float;

grammar(scope: &mut Scope);

pub Target: Target = {
	<e:FinalExpr> => Target::Expr(e),
	<set:ExprSet> => Target::ExprSet(set),
  ConfigComment => Target::Config,
};

pub ExprSet: ExprSet = {
	<FinalExpr> ";" <FinalExpr> => ExprSet(vec![<>]),
	<mut set:ExprSet> ";" <e:FinalExpr> => {
		set.push(e);
		set
	},
};

pub FinalExpr: Box<Expr> = {
	Expr,
	Equation,
}

//FIXME dry this code
pub Equation: Box<Expr> = {
	Expr EquationOp Expr => Box::new(Expr::new(ExprKind::BinaryOp(<>))),
	Equation EquationOp Expr => Box::new(Expr::new(ExprKind::BinaryOp(<>))),
};

pub EquationOp: Opcode = {
	"=" => Equals,
	"~=" => ApproxEquals,
	"!=" => NotEquals,
	">" => GreaterThan,
	"<" => LesserThan,
	">=" => GtEquals,
	"<=" => LtEquals,
};

pub Expr: Box<Expr> = {
	Expr ExprOp FactorLate => Box::new(Expr::new(ExprKind::BinaryOp(<>))),
	ExprOp FactorLate => Box::new(Expr::new(ExprKind::UnaryOp(<>))),
	FactorLate,
};

ExprOp: Opcode = {
	"+" => Add,
	"-" => Sub,
  "@" => At,
};

FactorLate: Box<Expr> = {
	FactorLate FactorOpLate FactorEarly => Box::new(Expr::new(ExprKind::BinaryOp(<>))),
	FactorEarly,
};

FactorOpLate: Opcode = {
	"*"  => Mul,
	"/"  => Div,
};

FactorEarly: Box<Expr> = {
  FactorEarly FactorOpEarly UTerm => Box::new(Expr::new(ExprKind::BinaryOp(<>))),
  UTerm,
};

FactorOpEarly: Opcode = {
	"**" => Pow,
};

// Term with an unit
pub UTerm: Box<Expr> = {
  <mut v:Term> ":" "(" <u:Expr> ")" => {
    v.unit = Some(u.render(scope).to_owned());
    v
  },
  Term,
};

Term: Box<Expr> = {
	FQIdent,
	<f:FloatTok> => Box::new(Expr::from(*f)),
	"(" <Expr> ")"
};

// "Fully Qualified", has indexing info too
FQIdent: Box<Expr> =
  <mut id:Ident> <idx:r"\[[0-9]+\]"?> => {
  if let Some(j) = idx {
    if let ExprKind::Ident(idstr) = &mut id.v {
      idstr.push_str(j);
    }
  }
  id
};

// sub/superscript nesting is now left associative, but it should be right associative
// need to find a good way to fix this within the constraints of LR(1)
Ident: Box<Expr> = {
  // FIXME: function calls should be separate from the argument(s)
	<fname:Ident> "(" <fargs:Expr> ")" => Box::new(Expr::new(ExprKind::Ident(format!("{}({})", fname.render(scope), fargs.render(scope))))),

  <a:Ident> <op:IdentOp> <b:Name> => {
    let temp = ExprKind::BinaryOp(a, op, b);
    Box::new(Expr::new(ExprKind::Ident(temp.render(scope))))
  },
  <a:Ident> <op:IdentOp> <b:FloatTok> => {
    let temp = ExprKind::BinaryOp(a, op, Box::new(Expr::from(*b)));
    let sbak = scope.repstyle;
    scope.repstyle = RepStyle::Verbatim;
    let r = Box::new(Expr::new(ExprKind::Ident(temp.render(scope))));
    scope.repstyle = sbak;
    r
  },

  Name
};

IdentOp: Opcode = {
	"__" => Superscript,
	"_"  => Subscript,
};

Name: Box<Expr> = {
  NameChars => Box::new(Expr::new(ExprKind::Ident(<>.to_owned()))),
}

NameChars: &'input str = r#"[\S--[[0-9]._\+\-\*/=!\~():\[\];#]][\S--[_\+\-\*/=!\~():\[\];#]]*"#;
FloatTok: Box<Float> = r#"([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?"# => {
  let pval = Float::parse(<>);
  Box::new(Float::with_val(scope.precision,pval.unwrap()))
};


ConfigComment: u32 = {
  Comment "style SI" => { scope.repstyle = RepStyle::SiSuffix; 0 },
  Comment "style 10" => { scope.repstyle = RepStyle::TenExp; 0 },
  Comment "style e"  => { scope.repstyle = RepStyle::Scientific; 0 },
  Comment "style v" => { scope.repstyle = RepStyle::Verbatim; 0 },
  Comment <r#"digits [0-9]+"#> => {
    let ns = <>.trim_start_matches("digits ");
    scope.max_digits_after_zero = ns.parse::<usize>().unwrap(); 0
  },
}
Comment: &'input str = r#"#"#;

