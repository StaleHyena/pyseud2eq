use crate::ast::{Expr, ExprKind, Equation, Opcode};

grammar;

pub Equation: Equation<'input> = {
	<Expr> "=" <Expr> => (<>).into()
};

pub Expr: Box<Expr<'input>> = {
	Expr ExprOp Factor => {
		let (rhs, op, lhs) = (<>);
		Box::new(Expr {
			l: 0,
			v: ExprKind::Op(rhs, op, lhs),
		})
	},
	Factor,
};

ExprOp: Opcode = {
	"+" => Opcode::Add,
	"-" => Opcode::Sub,
};

Factor: Box<Expr<'input>> = {
	Factor FactorOp Term => {
		let (rhs, op, lhs) = (<>);
		Box::new(Expr {
			//l: std::cmp::min(rhs.l, lhs.l),
			l: 0,
			v: ExprKind::Op(rhs, op, lhs),
		})
	},
	Term,
};

FactorOp: Opcode = {
	"**" => Opcode::Superscript,
	"__" => Opcode::Superscript,
	"_"  => Opcode::Subscript,
	"*"  => Opcode::Mul,
	"/"  => Opcode::Div,
};

Term: Box<Expr<'input>> = {
	Name => Box::new(Expr {
		v: ExprKind::Name(<>),
		l: 0,
	}),
	"(" <Expr> ")" => {
		println!("up \"{}\" :: #{}", &(<>), &(<>).l);
		Box::new(Expr {
			v: (<>).v,
			l: (<>).l + 1,
		})
	},
}

Name: &'input str = r"-?[[:alnum:]]+\.?([[:alnum:]]+)?";
